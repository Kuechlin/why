@precedence {
  member,
  newArgs,
  call,
  times @left,
  plus @left,
  rel @left,
  ternary @right,
  assign @right,

  forIn,
  else,
  statement @cut
}


@top Program { statement* }

@skip { space }

kw<T> {
  @specialize<Identifier, T>
}


semi { ";" }

statement[@isGroup=Statement] {
  If |
  Is |
  Let |
  Def |
  Fn |
  Block |
  Expr { expression semi } |
  Empty { ";" }
}

Block {
  !statement "{" statement* "}"
}

If {
  kw<"if"> statement Block (kw<"else"> (If | Block))?
}

Def {
  kw<"def"> TypeIdentifier ":" type semi
}

Is {
  statement kw<"is"> "{" Match* "}"
}

Match {
  !statement ("!" | ">=" | ">" | "<=" | "<" | ":")? (expression | type)? "->" statement ","?
}

Let {
  kw<"let"> Identifier "=" statement semi
}

Fn {
  kw<"fn"> ParamList "->" type Block
}

ParamList {
  (Identifier ":" type ("," Identifier ":" type)*)?
}


type[@isGroup=Type] {
  Func { "(" kw<"fn"> ":" type "->" type ")" } |
  Or { "(" type ("|" type)* ")" } |
  TypeIdentifier
}

expression[@isGroup=Expression] {
  Number |
  String |
  Identifier |
  @specialize[@name=Boolean]<Identifier, "true" | "false"> |
  Call |
  Unary |
  Binary
}

Binary { 
  "(" expression ("+" | "-" | "*" | "/" | "==" | "!=" | ">=" | ">" | "<=" | "<") expression ")"
}

Unary {
  ("!" | "-") expression
}


Call {
  expression !call ArgList
}

ArgList {
  "(" (statement ("," statement)*)? ")"
}

@tokens {
  Identifier { ($[a-z_]) (@asciiLetter | @digit | "_")* }
  TypeIdentifier { ($[A-Z]) (@asciiLetter | @digit  | "_")* }

  Number { $[0-9]+ }

  String { '"' (!["\\] | "\\" _)* '"' }

  space { @whitespace+ }

  "(" ")"
}

@detectDelim